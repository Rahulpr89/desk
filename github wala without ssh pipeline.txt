pipeline {
    agent any
 
    tools {
        maven 'maven' // Ensure this is configured in Jenkins Global Tool Configuration
    }
 
    environment {
        TOMCAT_USER = 'deployer'
        TOMCAT_PASS = 'deployer'
        TOMCAT_HOST = '44.203.218.226'
        TOMCAT_PORT = '8080'
    }
 
    stages {
        stage('Clone Repository') {
            steps {
                git branch: 'main', url: 'https://github.com/Rahulpr89/devops-project.git'
            }
        }
 
        stage('Build with Maven') {
            steps {
                sh 'mvn clean package -Dmaven.test.failure.ignore=true'
            }
        }
 
        stage('Deploy to Tomcat') {
            steps {
                sh '''
                    curl -u $TOMCAT_USER:$TOMCAT_PASS \
                    --upload-file webapp/target/webapp.war \
                    "http://$TOMCAT_HOST:$TOMCAT_PORT/manager/text/deploy?path=/sampleapp&update=true"
                '''
            }
        }
 
        stage('Deploy to Docker Host') {
            steps {
                sshPublisher(publishers: [
                    sshPublisherDesc(
                        configName: 'docker', // Must match SSH config name in Jenkins
                        transfers: [
                            sshTransfer(
                                sourceFiles: '**/*',
                                removePrefix: '',
                                remoteDirectory: 'files',
                                execCommand: '''
                                    cd files
                                    aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 823339243662.dkr.ecr.us-east-1.amazonaws.com
                                    docker build -t my-private-docker-hub .
                                    docker tag my-private-docker-hub:latest 823339243662.dkr.ecr.us-east-1.amazonaws.com/my-private-docker-hub:latest
                                    docker push 823339243662.dkr.ecr.us-east-1.amazonaws.com/my-private-docker-hub:latest
                                '''
                            )
                        ]
                    )
                ])
            }
        }
        stage('installing kubectl and eksctl'){
            steps{
                withCredentials([string(credentialsId: 'sudo-password', variable: 'SUDO_PASS')]) {
    sh '''
       
 curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
        echo "$SUDO_PASS" | sudo -S mv /tmp/eksctl /usr/local/bin

        curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
        echo "$SUDO_PASS" | sudo -S install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
    '''
}
            }
        }
        stage('Deploy to EKS') {
            steps {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'awsconfig']]) {
                    sh '''
                        aws eks update-kubeconfig --region us-east-1 --name my-cluster
                        kubectl delete -f deployment.yaml
                        kubectl apply -f deployment.yaml
                        kubectl apply -f service.yaml
                        kubectl rollout status deployment/regapp-deployment
                    '''
                }
            }
        }
    }
 
    post {
        success {
            junit '**/target/surefire-reports/TEST-*.xml'
            archiveArtifacts artifacts: '**/target/*.war', fingerprint: true
        }
    }
}